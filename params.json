{"name":"Nagios-cloudwatch","tagline":"Nagios check for AWS Cloudwatch statistics/metrics","body":"#Description\r\n\r\nNagios Cloudwatch is a set of scripts to help with the Nagios (and derivates) monitoring of Amazon Cloud resources.\r\n\r\nPossible checks:\r\n\r\n* Amazon EC2 statuses\r\n  * Instance running\r\n* Amazon Cloudwatch statistics\r\n  - Reading/reporting on EC2 instance statistics metrics, such as CPUUtilization, etc\r\n  - Reading/reporging on ELB statistics, such as HealthyHostCount, Latency, etc\r\n#Pre-requisites\r\n\r\n* Ruby environment with ruby version > 1.9.1 (see below)\r\n* Configuration file config.yml, unless you supply the credentials on the command line\r\n\r\n#Installation:\r\n\r\n## This git repo\r\n\r\n````\r\nmkdir /path/to/your/plugins\r\ncd /path/to/your/plugins\r\ngit clone git@github.com:maglub/nagios-cloudwatch.git\r\n````\r\n\r\n\r\n## config.yml\r\n\r\n* Create a read-only user in AWS and associate it with your environment\r\n* Put the access key and secret key in a config.yml file in the same directory as these scripts (or somewhere else if you intend to use the -C parameter)\r\n\r\n````\r\naws:\r\n  #======================\r\n  #--- authentication\r\n  #======================\r\n  access_key_id: YOUR_ACCESS_KEY\r\n  secret_access_key: YOUR_SECRET_KEY\r\n  \r\n  #========================================\r\n  #--- default region, unless overridden on the command line\r\n  #========================================\r\n  #--- possible regions us-west-1 us-west-2 eu-west-1, etc...\r\n  region: us-west-2\r\n\r\n  #======================\r\n  #--- Proxy config\r\n  #======================\r\n  #proxy_uri: http://user:passwd@IP:PORT\r\n\r\n````\r\n\r\n## Ruby\r\n### Ubuntu 12.04 LTS\r\n\r\nIf your installation come with ruby 1.8, you might have to start the script with `/usr/bin/ruby1.9.1 ./check_cloudwatch.rb`, unless you follow the second step on how to make ruby1.9.1 default in your installation.\r\n\r\n\r\n````\r\nsudo apt-get install -y ruby1.9.1 ruby1.9.1-dev \\\r\n     rubygems1.9.1 irb1.9.1 ri1.9.1 rdoc1.9.1 \\\r\n\t build-essential libopenssl-ruby1.9.1 libssl-dev zlib1g-dev\r\n\r\nsudo gem install aws-sdk-core --pre\r\n````\r\n\r\nNote: to make ruby1.9.1 default on your system, follow the instructions on:\r\n\r\n* https://leonard.io/blog/2012/05/installing-ruby-1-9-3-on-ubuntu-12-04-precise-pengolin/\r\n\r\n````\r\nsudo apt-get update\r\n \r\nsudo apt-get install ruby1.9.1 ruby1.9.1-dev \\\r\n   rubygems1.9.1 irb1.9.1 ri1.9.1 rdoc1.9.1 \\\r\n   build-essential libopenssl-ruby1.9.1 libssl-dev zlib1g-dev\r\n \r\nsudo update-alternatives --install /usr/bin/ruby ruby /usr/bin/ruby1.9.1 400 \\\r\n          --slave   /usr/share/man/man1/ruby.1.gz ruby.1.gz \\\r\n                         /usr/share/man/man1/ruby1.9.1.1.gz \\\r\n         --slave   /usr/bin/ri ri /usr/bin/ri1.9.1 \\\r\n         --slave   /usr/bin/irb irb /usr/bin/irb1.9.1 \\\r\n         --slave   /usr/bin/rdoc rdoc /usr/bin/rdoc1.9.1\r\n \r\n # choose your interpreter\r\n # changes symlinks for /usr/bin/ruby , /usr/bin/gem\r\n # /usr/bin/irb, /usr/bin/ri and man (1) ruby\r\n sudo update-alternatives --config ruby\r\n sudo update-alternatives --config gem\r\n \r\n # now try\r\n ruby --version\r\n````\r\n\r\n### RedHat/CentOS\r\n\r\nhttps://gist.github.com/trevorrowe/1870314\r\n\r\n\tsudo yum install -y gcc make \\\r\n\tlibxml2 libxml2-devel libxslt libxslt-devel \\\r\n\trubygems ruby-devel\r\n\t \r\n\tsudo gem install nokogiri -- --with-xml2-lib=/usr/local/lib \\\r\n\t--with-xml2-include=/usr/local/include/libxml2 \\\r\n\t--with-xslt-lib=/usr/local/lib \\\r\n\t--with-xslt-include=/usr/local/include\r\n\t \r\n\tsudo gem install aws-sdk --no-ri --no-rdoc\r\n\r\n\r\n## OP5 Appliance (CentOS)\r\n\r\nPre-requisites already in place.\r\n\r\n#Usage\r\n\r\n## Examples\r\n\r\n* Check an ELB (Elastic Load Balancer) for the number of healthy hosts. \r\n\r\n````\r\n./check_cloudwatch.rb --instance=\"<INSTANCE_NAME>\" --namespace=\"AWS/ELB\" --metric=\"HealthyHostCount\" --window=120 --period=60 --critical=:1+ --warning=:2+\r\nOK - Metric: HealthyHostCount, Last Average: 2.0 Count (2014-06-14 13:34:00 UTC)\r\n|Average=2.0,Minimum=2.0,Maximum=2.0,Sum=240.0\r\n````\r\n\r\n* Check an ELB for the total number of ok requests over the last 5 minutes, warning when the number of requests equal or exceed 10 requests, critical at 15\r\n\r\n````\r\n./check_cloudwatch.rb -i <INSTANCE_NAME> --window=3600 --metric=HTTPCode_Backend_2XX --window=300 --period=300 --critical=15 --warning=10 --statistics=\"Sum\"\r\n````\r\n\r\n## Thresholds\r\n\r\n* --warning={@}<threshold>{+}, -w {@}<threshold>{+}\r\n* --critical={@}<threshold>{+}, -c {@}<threshold>{+}\r\n\r\nThe threshold parameter can be a single value or a range, and can handle decimal values.\r\n\r\n* A threshold can be checked to be within a range, or outside a range.\r\n* To alert when a value is outside a range, use the prefix \"@\".\r\n\r\nThe thresholds can be \"soft\" or \"hard\", meaning that ha hard threshold will include the parameter value (by comparing >= or <=). A soft threshold means that the check will not trigger when the checked value is equal to the threshold value (by comparing > or <).\r\n\r\nA soft threshold is selected by suffixing \"+\" to the threshold.\r\n\r\nExamples of valid thresholds are:\r\n\r\n1, 1.0, 1:+, :1.5, 0:1000, @1:100\r\n\r\n* \"-c 75\"    will trigger when the value is equal to or larger than 75\r\n* \"-c 75+\"   will trigger when the value is larger than 75\r\n* \"-c 0:1\"   will trigger when the value is equal to or larger than 0 and equal to or less than 1 \r\n* \"-c 0:1+\"  will trigger when the value is larger than 0 and less than 1\r\n* \"-c @0:1+\"  will trigger when the value is outside the soft range\r\n\r\n\r\n## Listing metrics\r\n\r\nYou can list available metrics for your instance, your load balancer, etc, by using the --list-metrics parameter.\r\n\r\n  ./check_cloudwatch.rb --namespace=\"AWS/EC2\" -i <instance_id> --list-metrics\r\n\r\n## Statistics window, and statistics period\r\n\r\nThe collection of AWS metrics is not done every minute. For example CPUUtilization is collected every 5 minutes. If you are asking for a window of 60 seconds and a period of 60 seconds, it is very likely that Cloudwatch will return an empty result set since there is no data to be presented for that period. This is a feature of the AWS Cloudwatch.\r\n\r\nThe workaround for this is to ask for a longer period, say 10 minutes or longer, to make sure you will get at least one metric in your result set.\r\n\r\n  ./check_cloudwatch.rb --namespace=\"AWS/EC2\" -i <instance_id> --metric=\"CPUUtilization\" --window=600 --period=60\r\n  \r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}