#
# Window/Period should reflect the frequency your Nagios/OP5 installation
# is checking the service, i.e. for a 5 minute polling interval, the Window should
# be 600 (2 polling intervals), and the period should be 300, to get the correct
# representation of perfdata. This is true for most metrics.
#
# For some of the checks, it is more important to get an alarm as quickly as possible,
# and the quantity will not get lost due to the missing samples.
#
# To properly tweak the thresholds and the Window/Period for your environment, it is
# important that you have a good understanding of at which frequency AWS is collecting the
# data, and what this has for an effect when querying this data.
#
# For a metric which is sampled every 5 minutes, a request will return an empty result set
# most of the time if queried with --window=60 and --period=60, since the AWS sample happened
# up to 5 minutes ago.
#
# For metrics sampled with a 5 minute period, you should query for the last 10 minutes to
# make sure to get at least one result, with a period of 5 minutes. In most of the queries
# AWS will return 1 sample, but at times 2 samples. The check_cloudwatch.rb script will
# select the newest sample available in the result set.
#
# Name							AWS Sample		Window/Period		Threshold			Statistic			Threshold
#								period		
# StatusCheckFailed				1 minute		600/300				hard limit			Maximum				$ARG2$ 	(value >= ARG)
# NetworkOut					5 minutes		600/300				hard limit			Sum					$ARG2$ 	(value >= ARG)
# DiskReadBytes					5 minutes		600/300				hard limit			Average (default)	$ARG2$ 	(value >= ARG)
# DiskWriteOps					5 minutes		600/300				hard limit			Average (default)	$ARG2$ 	(value >= ARG)
# StatusCheckFailed_Instance	1 minute		120/60				soft limit			Average (default)	$ARG2$+	(value > ARG) (i.e. --warning=0+ will warn when value > 0)
# StatusCheckFailed_System		1 minute		120/60				soft limit			Average (default)	$ARG2$+	(value > ARG) (i.e. --warning=0+ will warn when value > 0)
# DiskReadOps					5 minutes		600/300				hard limit			Average (default)	$ARG2$ 	(value >= ARG)
# NetworkIn						5 minutes		600/300				hard limit			Sum					$ARG2$ 	(value >= ARG)
# DiskWriteBytes				5 minutes		600/300				hard limit			Average (default)	$ARG2$ 	(value >= ARG)
# CPUUtilization				5 minutes		600/300				hard limit			Average (default)	$ARG2$ 	(value >= ARG)



# command 'aws-cloudwatch-ec2-StatusCheckFailed'
define command{
    command_name                   aws-cloudwatch-ec2-StatusCheckFailed
    command_line                   $USER1$/custom/nagios-cloudwatch/check_cloudwatch.rb --ec2 --metric=StatusCheckFailed --statistics="Maximum" --window=600 --period=300 -i $ARG1$ -w $ARG2$ -c $ARG3$ --region=$ARG4$ --config=$ARG5$
    }
	
# command 'aws-cloudwatch-ec2-NetworkOut'
define command{
    command_name                   aws-cloudwatch-ec2-NetworkOut
    command_line                   $USER1$/custom/nagios-cloudwatch/check_cloudwatch.rb --ec2 --metric=NetworkOut --statistics="Sum" --window=600 --period=300 -i $ARG1$ -w $ARG2$ -c $ARG3$ --region=$ARG4$ --config=$ARG5$
    }
	
# command 'aws-cloudwatch-ec2-DiskReadBytes'
define command{
    command_name                   aws-cloudwatch-ec2-DiskReadBytes
    command_line                   $USER1$/custom/nagios-cloudwatch/check_cloudwatch.rb --ec2 --metric=DiskReadBytes --window=600 --period=300 -i $ARG1$ -w $ARG2$ -c $ARG3$ --region=$ARG4$ --config=$ARG5$
    }
	
# command 'aws-cloudwatch-ec2-DiskWriteOps'
define command{
    command_name                   aws-cloudwatch-ec2-DiskWriteOps
    command_line                   $USER1$/custom/nagios-cloudwatch/check_cloudwatch.rb --ec2 --metric=DiskWriteOps --window=600 --period=300 -i $ARG1$ -w $ARG2$ -c $ARG3$ --region=$ARG4$ --config=$ARG5$
    }
	
# command 'aws-cloudwatch-ec2-StatusCheckFailed_Instance'
define command{
    command_name                   aws-cloudwatch-ec2-StatusCheckFailed_Instance
    command_line                   $USER1$/custom/nagios-cloudwatch/check_cloudwatch.rb --ec2 --metric=StatusCheckFailed_Instance --statistic="Average" --window=120 --period=60 -i $ARG1$ -w $ARG2$+ -c $ARG3$+ --region=$ARG4$ --config=$ARG5$
    }
	
# command 'aws-cloudwatch-ec2-StatusCheckFailed_System'
define command{
    command_name                   aws-cloudwatch-ec2-StatusCheckFailed_System
    command_line                   $USER1$/custom/nagios-cloudwatch/check_cloudwatch.rb --ec2 --metric=StatusCheckFailed_System --statistic="Average" --window=120 --period=60 -i $ARG1$ -w $ARG2$+ -c $ARG3$+ --region=$ARG4$ --config=$ARG5$
    }
	
# command 'aws-cloudwatch-ec2-DiskReadOps'
define command{
    command_name                   aws-cloudwatch-ec2-DiskReadOps
    command_line                   $USER1$/custom/nagios-cloudwatch/check_cloudwatch.rb --ec2 --metric=DiskReadOps --window=600 --period=300 -i $ARG1$ -w $ARG2$ -c $ARG3$ --region=$ARG4$ --config=$ARG5$
    }
	
# command 'aws-cloudwatch-ec2-NetworkIn'
define command{
    command_name                   aws-cloudwatch-ec2-NetworkIn
    command_line                   $USER1$/custom/nagios-cloudwatch/check_cloudwatch.rb --ec2 --metric=NetworkIn --statistic="Sum" --window=600 --period=300 -i $ARG1$ -w $ARG2$ -c $ARG3$ --region=$ARG4$ --config=$ARG5$
    }
	
# command 'aws-cloudwatch-ec2-DiskWriteBytes'
define command{
    command_name                   aws-cloudwatch-ec2-DiskWriteBytes
    command_line                   $USER1$/custom/nagios-cloudwatch/check_cloudwatch.rb --ec2 --metric=DiskWriteBytes --window=600 --period=300 -i $ARG1$ -w $ARG2$ -c $ARG3$ --region=$ARG4$ --config=$ARG5$
    }
	
# command 'aws-cloudwatch-ec2-CPUUtilization'
define command{
    command_name                   aws-cloudwatch-ec2-CPUUtilization
    command_line                   $USER1$/custom/nagios-cloudwatch/check_cloudwatch.rb --ec2 --metric=CPUUtilization --window=600 --period=300 -i $ARG1$ -w $ARG2$ -c $ARG3$ --region=$ARG4$ --config=$ARG5$
    }
